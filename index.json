[
{
	"uri": "/6-policiespermissions/6.4-boundaries/6.4.1-users/",
	"title": "Boundaries for Users",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function attach-user-policy Attach Managed Policies to the specified User detach-user-policy Detach Managed Policies to the specified User put-user-permissions-boundary Specify Managed Policies as the permission boundary of the specified User delete-user-permissions-boundary Delete Managed Policies that have been specified as permission boundaries from the specified User We can dig deeper into each command by clicking on the command name.\nSpecify permission boundaries for Users For ease, in this section we will use AWS Managed Policies Execute the command attach-user-policy to Attach AWS Managed Policies AdministratorAccess to User FCJ-User aws iam attach-user-policy --user-name FCJ-User --policy-arn arn:aws:iam::aws:policy/AdministratorAccess Execute the command put-user-permissions-boundary to specify AWS Managed Policies AmazonEC2FullAccess as the permission boundary of User FCJ-User aws iam put-user-permissions-boundary --user-name FCJ-User --permissions-boundary arn:aws:iam::aws:policy/AmazonEC2FullAccess Simulator Permissions boundaries Reload the IAM Policy Simulator page In the Users, Groups, and Roles field, select FCJ-User The Policies tab appears, we will see that in the IAM Policies field is the AWS Managed Policies AdministratorAccess, in the Permission Boundary Policy field is the AWS Managed Policies AmazonEC2FullAccess we added to User FCJ-User in the above step In the Policy Simulator field, select the EC2 service, then select Select All Select Simulator, we see allowed results for all actions Select Clear Result In the Policy Simulator field, select the S3 service, then select Select All Select Simulator, we see denied results for all actions Select Clear Result In the Policy Simulator field, select the Lamda service, then select Select All Select Simulator, we see denied results for all actions So, we have successfully set the maximum permission boundary for User FCJ-User to only AmazonEC2FullAccess, not AdministratorAccess\nRemove permission boundaries from Users Execute the command delete-user-permissions-boundary to delete Managed Policies that have been specified as User permission boundaries FCJ-User aws iam delete-user-permissions-boundary --user-name FCJ-User Execute the command detach-user-policy to detach AWS Managed Policies AdministratorAccess from User FCJ-User aws iam detach-user-policy --user-name FCJ-User --policy-arn arn:aws:iam::aws:policy/AdministratorAccess "
},
{
	"uri": "/2-preparation/2.1-createroles/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access IAM Console Select Roles Select Create Role At Select trusted entity page In the Trusted entity type field, select AWS service In the Use case field, enter EC2 Scroll down to the bottom, select Next At the Add permissions page In the Permissions policies field, select AdministratorAccess Scroll down to the bottom, select Next At page Name, review, and create In the Role name field, enter FCJ-Admin-Role Check the information again, then select Create Role Successfully created IAM Roles FCJ-Admin-Role "
},
{
	"uri": "/6-policiespermissions/6.2-inlinepolicies/6.2.1-createpolicies/",
	"title": "Create Policies",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function put-user-policy Embed Inline Policies into the specified User list-user-policies List all Inline Policies of the specified User put-group-policy Embed Inline Policies into the specified Group list-group-policies List all Inline Policies of the specified Group put-role-policy Embed Inline Policies into the specified Role list-role-policies List all Inline Policies of the specified Role We can dig deeper into each command by clicking on the command name.\nCreate Policies Execute the following command to create the file FCJ-User-Inline-Policy.json. This file will contain the policy assigned to User in the following step.\nThis policy will grant access to EC2 FullAccess cat \u0026lt;\u0026lt;EOF \u0026gt; FCJ-User-Inline-Policy.json\r{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;ec2:*\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r}\rEOF Check the file information FCJ-User-Inline-Policy.json with the following command: cat FCJ-User-Inline-Policy.json Execute the following command to create the file FCJ-Inline-Policy.json. This file will contain the policy assigned to Group and Role in the following step\nThis policy will grant access to S3 FullAccess cat \u0026lt;\u0026lt;EOF \u0026gt; FCJ-User-Inline-Policy.json\r{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;ec2:*\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r}\rEOF Check the file information FCJ-Inline-Policy.json with the following command: cat FCJ-Inline-Policy.json Create Inline Policies for Users Execute the command put-user-policy to embed Inline Policies FCJ-User-Inline-Policy into User FCJ-User-Login aws iam put-user-policy --user-name FCJ-User-Login --policy-name FCJ-User-Inline-Policy --policy-document file://FCJ-User-Inline-Policy.json Execute the command list-user-policies to list all Inline Policies of User FCJ-User-Login\nWe see that User FCJ-User-Login currently has Inline Policies FCJ-User-Inline-Policy aws iam list-user-policies --user-name FCJ-User-Login Create Inline Policies for Groups Execute the command put-group-policy to embed Inline Policies FCJ-Inline-Policy into Group FCJ-Group aws iam put-group-policy --group-name FCJ-Group --policy-name FCJ-Inline-Policy --policy-document file://FCJ-Inline-Policy.json Execute the command list-group-policies to list all Inline Policies of Group FCJ-Group\nWe see that Group FCJ-Group currently has Inline Policies FCJ-Inline-Policy aws iam list-group-policies --group-name FCJ-Group Execute the command get-group to check information of Group FCJ-Group (in case you do not know which User is currently in Group FCJ-Group) aws iam get-group --group-name FCJ-Group Create Inline Policies for Roles Execute the command put-role-policy to embed Inline Policies FCJ-Inline-Policy into Role FCJ-Role aws iam put-role-policy --role-name FCJ-Role --policy-name FCJ-Inline-Policy --policy-document file://FCJ-Inline-Policy.json Execute the command list-role-policies to list all Inline Policies of Role FCJ-Role\nWe see that currently the Role FCJ-Role has Inline Policies FCJ-Inline-Policy aws iam list-role-policies --role-name FCJ-Role Next we will simulate the Inline Policies we have embedded into the Entities above.\n"
},
{
	"uri": "/6-policiespermissions/6.3-managedpolicies/6.3.1-createpolicies/",
	"title": "Create Policies",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function create-policy Create Policy list-policies List all existing Policies in Account We can dig deeper into each command by clicking on the command name.\nCreate Policies Execute the following command to create the file FCJ-User-Managed-Policy.json. This file will contain the policy assigned to User in the following step. This policy will: Grant Allow permission to 2 Actions ec2:StartInstances and ec2:StopInstances to all EC2 Resources but to Condition is ResourceTag with Key=Group, Value=FCJ Grant Allow permission with Action ec2:DescribeInstances to all EC2 Resources cat \u0026lt;\u0026lt;EOF \u0026gt; FCJ-User-Managed-Policy.json\r{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;ec2:StartInstances\u0026#34;,\r\u0026#34;ec2:StopInstances\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Condition\u0026#34;: {\r\u0026#34;StringEquals\u0026#34;: {\r\u0026#34;aws:ResourceTag/Group\u0026#34;: \u0026#34;FCJ\u0026#34;\r}\r}\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;ec2:DescribeInstances\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r}\rEOF Check the file information FCJ-User-Managed-Policy.json with the following command: cat FCJ-User-Managed-Policy.json Execute the following command to create FCJ-Managed-Policy.json file. This file will contain the policy assigned to Group and Role in the following step. This policy will: Grant Allow permission to 3 Actions s3:ListBucket, s3:CreateBucket and s3:DeleteBucket to all S3 Resources Grant Allow permission to 3 Actions ec2:DescribeInstances, ec2:DescribeImages and ec2:DescribeInstanceTypes to all EC2 Resources cat \u0026lt;\u0026lt;EOF \u0026gt; FCJ-Managed-Policy.json\r{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;s3:ListBucket\u0026#34;,\r\u0026#34;s3:CreateBucket\u0026#34;,\r\u0026#34;s3:DeleteBucket\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;ec2:DescribeInstances\u0026#34;,\r\u0026#34;ec2:DescribeImages\u0026#34;,\r\u0026#34;ec2:DescribeInstanceTypes\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r}\rEOF Check the file information FCJ-Managed-Policy.json with the following command: cat FCJ-Managed-Policy.json Execute the command create-policy to create 2 Managed Policies FCJ-User-Managed-Policy and FCJ-Managed-Policy aws iam create-policy --policy-name FCJ-User-Managed-Policy --policy-document file://FCJ-User-Managed-Policy.json\raws iam create-policy --policy-name FCJ-Managed-Policy --policy-document file://FCJ-Managed-Policy.json Execute the list-policies command to list all existing Policies in Account aws iam list-policies Running the list-policies commands will take a little time, there will be many Policies printed in the above command, quite difficult to retrieve.\nSo we can add the --query option to process the output more compactly and as desired. You can choose one of the options below: --query \u0026quot;Policies[?PolicyName == 'FCJ-User-Managed-Policy'].[PolicyName, Arn]\u0026quot; : Filter out Policies with PolicyName=FCJ-User-Managed-Policy , output in array format includes 2 parameters PolicyName and Arn --query \u0026quot;Policies[?PolicyName == 'FCJ-Managed-Policy'].[PolicyName, Arn]\u0026quot; : Filter out Policies with PolicyName=FCJ-Managed-Policy, output as array includes 2 parameters PolicyName and Arn --query \u0026quot;Policies[?starts_with(PolicyName,'FCJ')].[PolicyName, Arn]\u0026quot; : Filter out Policies whose PolicyName starts with FCJ, output as array includes 2 parameters PolicyName and Arn aws iam list-policies --query \u0026#34;Policies[?PolicyName == \u0026#39;FCJ-User-Managed-Policy\u0026#39;].[PolicyName, Arn]\u0026#34;\raws iam list-policies --query \u0026#34;Policies[?PolicyName == \u0026#39;FCJ-Managed-Policy\u0026#39;].[PolicyName, Arn]\u0026#34;\raws iam list-policies --query \u0026#34;Policies[?starts_with(PolicyName,\u0026#39;FCJ\u0026#39;)].[PolicyName, Arn]\u0026#34; "
},
{
	"uri": "/5-workroles/5.1-createrole/",
	"title": "Create Roles",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function create-role Create Role update-role Update specified Role information get-role Check specified Role information We can dig deeper into each command by clicking on the command name.\nCreate Trust Policy First we need to create Trust Policy for Roles. Trust Policy is a document written in JSON format that defines who is allowed to use Roles Execute the following command, where \u0026lt;your_account_id\u0026gt; is the Account ID of your AWS account cat \u0026lt;\u0026lt;EOF \u0026gt; FCJ-Trust-Policy.json\r{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;\u0026lt;your_account_id\u0026gt;\u0026#34; },\r\u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;\r}\r]\r}\rEOF The above command will create the file FCJ-Trust-Policy.json, specifying the subjects allowed to Assume this Role, in this case all Users in your AWS account. Check the file information again with the following command: cat FCJ-Trust-Policy.json Create Roles Execute the create-role command to create 2 Roles FCJ-Role and FCJ-Role-Updated, with the Trust Policy created in the file FCJ- Trust-Policy.json aws iam create-role --role-name FCJ-Role --assume-role-policy-document file://FCJ-Trust-Policy.json\raws iam create-role --role-name FCJ-Role-Updated --assume-role-policy-document file://FCJ-Trust-Policy.json Execute the get-role command to check the information of the Role FCJ-Role-Updated\nWe see that currently the MaxSessionDuration value is 3600 aws iam get-role --role-name FCJ-Role-Updated Execute the update-role command to update the MaxSessionDuration parameter of the Role FCJ-Role-Updated to 7200 aws iam update-role --role-name FCJ-Role-Updated --max-session-duration 7200 Execute the get-role command to check the information of the Role FCJ-Role-Updated.\nWe see that the MaxSessionDuration value has now been updated to 7200 aws iam get-role --role-name FCJ-Role-Updated MaxSessionDuration is the maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default value of one hour is applied. This setting can be valid from 1 hour to 12 hours.\n"
},
{
	"uri": "/3-workusers/3.1-createuser/",
	"title": "Create User",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function create-user Create User list-users List all existing Users in Account update-user Update specified User information get-user View information for a specified User We can dig deeper into each command by clicking on the command name.\nCreate Users Execute the command create-user to create 2 Users FCJ-User and FCJ-User-Before aws iam create-user --user-name FCJ-User\raws iam create-user --user-name FCJ-User-Before Execute the command list-users to list all existing Users in Account.\nWe see that there are currently 2 Users FCJ-User and FCJ-User-Before aws iam list-users Execute the command update-user to update the User name from FCJ-User-Before to FCJ-User-After aws iam update-user --user-name FCJ-User-Before --new-user-name FCJ-User-After Execute the command list-users to update specified User information.\nWe see that there are currently 2 Users FCJ-User and FCJ-User-After aws iam list-users Execute the command get-user to view information of a User FCJ-User aws iam get-user --user-name FCJ-User "
},
{
	"uri": "/4-workusergroups/4.1-creategroup/",
	"title": "Create User Groups",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function create-group Create Group list-groups List all existing Groups in Account update-group Update information of the specified Group We can dig deeper into each command by clicking on the command name.\nCreate User Groups Execute the command create-group to create 2 Groups FCJ-Group and FCJ-Group-Before aws iam create-group --group-name FCJ-Group\raws iam create-group --group-name FCJ-Group-Before Execute the list-groups command to list all existing Groups in Account.\nWe see that there are currently 2 Groups FCJ-Group and FCJ-Group-Before aws iam list-groups Execute the command update-group to change the Group name from FCJ-Group-Before to FCJ-Group-After aws iam update-group --group-name FCJ-Group-Before --new-group-name FCJ-Group-After Execute the list-groups command to list existing Groups in Account.\nWe see that there are currently 2 Groups FCJ-Group and FCJ-Group-After aws iam list-groups "
},
{
	"uri": "/",
	"title": "IAM with AWS CLI",
	"tags": [],
	"description": "",
	"content": "IAM with AWS CLI Overview In this Workshop, we will learn about AWS IAM (Identity and Access Management) and operations with IAM through AWS CLI (AWS Command Line Interface)\nContent 1. Introduction\n2. Preparation\n3. Work with Users\n4. Work with User Groups\n5. Work with Roles\n6. Policies and Permissions\n7. Clean Up Resources\n"
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "We will learn some key concepts related to this Workshop: IAM CLI IAM AWS IAM is an important service in the Amazon Web Services (AWS) ecosystem, designed to securely manage and control access to resources in the AWS cloud environment.\nAWS IAM allows you to create and manage identities, including Users, User Groups, Roles, which allows you to manage access through Policies and Permissions for identities in your account\nIAM access methods:\nAWS Management Console AWS Command Line Tools (AWS CLI) AWS Software Development Kits (AWS SDKs) IAM Query API CLI AWS CLI is a powerful tool for managing and interacting with resources and services in AWS cloud environments in general and AWS IAM in particular using line commands automation commands and scripts.\nIn this workshop, we will learn how to use the AWS CLI to interact with IAM components.\n"
},
{
	"uri": "/6-policiespermissions/6.1-policysimulator/",
	"title": "Policy Simulator",
	"tags": [],
	"description": "",
	"content": "Learn about Policy Simulator Policy Simulator is a simulator that allows us to test which AWS resources a particular User or Role has access to and what actions it can take. This helps ensure that our management and access policies are configured correctly.\nBy using Policy Simulator, we can optimize access and management policies to ensure that a User or Role only has access to what resources and what they are allowed to do.\nHow to access Policy Simulator Access IAM Console Select Dashboard Select Policy Simulator We will be taken to the IAM Policy Simulator page In the Users, Groups, and Roles section allows us to specify the identity to simulate, which can be Users, Groups, or Roles In the Policy Simulator section included Select service option to select AWS services such as S3, EC2, Lamda,\u0026hellip; Select actions option to select actions for each service, you can choose Select All or Deselect All,\nor select each specific action: StartInstance (EC2), StopInstance (EC2), CreateBucket (S3), DeleteBucket (S3), \u0026hellip; Run Simulator button to conduct simulation Clear Result button to clear simulated results, to proceed with simulating other services or actions To understand how Policy Simulator works and applies, we will use it to simulate policies in each specific case in the following sections.\n"
},
{
	"uri": "/4-workusergroups/4.2-adduser/",
	"title": "Add Users to Groups",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function add-user-to-group Add User to Group get-group Check specified Group information list-groups-for-user List all Groups containing the specified User remove-user-from-group Delete the specified User from the specified Group We can dig deeper into each command by clicking on the command name.\nAdd User to Group Execute the command add-user-to-group to add User FCJ-User to 2 Groups FCJ-Group and FCJ-Group-After aws iam add-user-to-group --user-name FCJ-User --group-name FCJ-Group\raws iam add-user-to-group --user-name FCJ-User --group-name FCJ-Group-After Execute the command get-group to check information of Group FCJ-Group.\nWe can see in the Users section there is the FCJ-User we added in the step above aws iam get-group --group-name FCJ-Group Execute the command list-groups-for-user to list all Groups containing User FCJ-User.\nWe see that User FCJ-User currently belongs to 2 Groups FCJ-Group and FCJ-Group-After aws iam list-groups-for-user --user-name FCJ-User Execute the command remove-user-from-group to remove User FCJ-User from Group FCJ-Group-After aws iam remove-user-from-group --user-name FCJ-User --group-name FCJ-Group-After Execute the command list-groups-for-user to list all Groups containing User FCJ-User.\nWe see that User FCJ-User currently only belongs to Group FCJ-Group aws iam list-groups-for-user --user-name FCJ-User "
},
{
	"uri": "/5-workroles/5.2-attachpolicy/",
	"title": "Attach Policies",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function attach-role-policy Attach Policy to the specified Role list-attached-role-policies List all Policies of the specified Role detach-role-policy Detach Policy from the specified Role We can dig deeper into each command by clicking on the command name.\nAttach Policies Execute the command list-attached-role-policies to list all Policies of Role FCJ-Role.\nWe see that currently Role FCJ-Role does not have any policies aws iam list-attached-role-policies --role-name FCJ-Role Execute the command attach-role-policy to attach Policy AmazonEC2FullAccess to Role FCJ-Role aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --role-name FCJ-Role Execute the command list-attached-role-policies to list all Policies of Role FCJ-Role.\nWe see that currently the Role FCJ-Role has the policy AmazonEC2FullAccess Attached aws iam list-attached-role-policies --role-name FCJ-Role Execute the command detach-role-policy to detach Policy AmazonEC2FullAccess from Role FCJ-Role aws iam detach-role-policy --role-name FCJ-Role --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess Execute the command list-attached-role-policies to list all Policies of Role FCJ-Role.\nWe see that currently Role FCJ-Role no longer has any policies aws iam list-attached-role-policies --role-name FCJ-Role arn:aws:iam::aws:policy/AmazonEC2FullAccess are called AWS Managed Policies, created and managed by AWS.\nWe will learn more about Policies and how they impact Roles in the chapter Policies and Permissions.\n"
},
{
	"uri": "/6-policiespermissions/6.3-managedpolicies/6.3.2-attachpolices/",
	"title": "Attach Policies",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function attach-user-policy Attach Managed Policies to the specified User list-attached-user List all Managed Policies of the specified User attach-group-policy Attach Managed Policies to the specified Group list-attached-group-policies List all Managed Policies of the specified Group attach-role-policy Attach Managed Policies to the specified Role list-attached-role-policies List all Managed Policies of the specified Role We can dig deeper into each command by clicking on the command name.\nAttach Policies Add your Account ID information before executing attach commands\nExecute the command attach-user-policy to Attach Managed Policies FCJ-User-Managed-Policy to User FCJ-User-Login aws iam attach-user-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-User-Managed-Policy --user-name FCJ-User-Login Execute the command attach-group-policy to Attach Managed Policies FCJ-Managed-Policy to Group FCJ-Group aws iam attach-group-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-Managed-Policy --group-name FCJ-Group Execute the command attach-role-policy to Attach Managed Policies FCJ-Managed-Policy to Role FCJ-Role aws iam attach-role-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-Managed-Policy --role-name FCJ-Role Execute the command list-attached-user-policies to list all Managed Policies of User FCJ-User-Login.\nWe see that User FCJ-User-Login currently has Managed Policies FCJ-User-Managed-Policy aws iam list-attached-user-policies --user-name FCJ-User-Login Execute the command list-attached-group-policies to list all Managed Policies of Group FCJ-Group.\nWe see that Group FCJ-Group currently has Managed Policies FCJ-Managed-Policy aws iam list-attached-group-policies --group-name FCJ-Group Execute the command list-attached-role-policies to list all Managed Policies of Role FCJ-Role.\nWe see that currently the Role FCJ-Role has Managed Policies FCJ-Managed-Policy aws iam list-attached-role-policies --role-name FCJ-Role Next we will simulate the Managed Policies we have attached to the Entities above.\n"
},
{
	"uri": "/3-workusers/3.2-authentication/",
	"title": "Authentication Management",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function create-login-profile Create Console login information for the specified User update-login-profile Update Console login information for the specified User create-access-key Create Access Key for the specified User list-access-keys List all Access Keys of the specified User update-access-key Update the Access Key status for the specified User delete-access-key Delete Access Key of the specified User We can dig deeper into each command by clicking on the command name.\nLogin Profile Execute the command create-user to create User FCJ-User-Login aws iam create-user --user-name FCJ-User-Login Execute the command create-login-profile to create Console login information for User FCJ-User-Login with password as FCJ2023@Password aws iam create-login-profile --user-name FCJ-User-Login --password FCJ2023@Password Execute the command update-login-profile to update the Console login information for User FCJ-User-Login with the new password as FCJ2023@NewPassword aws iam update-login-profile --user-name FCJ-User-Login --password FCJ2023@NewPassword Open a new incognito browser, access the link https://\u0026lt;Account Alias\u0026gt;.signin.aws.amazon.com/console to log in to the Console with User FCJ-User-Login\nAccount ID (12 digits) or account alias: automatically filled in to the \u0026lt;Account Alias\u0026gt; value we created in step 2.5 IAM user name: enter FCJ-User-Login Password: enter FCJ2023@NewPassword Check the information again, select Sign in Successfully logged in as shown below. Access EC2 Console\nAt this point, we see that User FCJ-User-Login does not have access to EC2 and even other services. So we have successfully created User and created login-profile to allow User to log in to Console.\nAccess Key Execute the command create-access-key to create an Access Key for User FCJ-User-Login.\nNote: Carefully save the Access Key and Secret Access Key information for use in the following steps aws iam create-access-key --user-name FCJ-User-Login Execute the command list-access-keys to list all Access Keys of User FCJ-User-Login.\nPlease note that the current status of Access Key is Active aws iam list-access-keys --user-name FCJ-User-Login Execute the command update-access-key to change the Access Key status from Active state to Inactive state.\nAnd it can be done the other way around if needed by replacing Inactive with Active. Please replace \u0026lt;your_access_key_ID\u0026gt; to match your information aws iam update-access-key --access-key-id \u0026lt;your_access_key_ID\u0026gt; --status Inactive --user-name FCJ-User-Login Execute the command list-access-keys to list all Access Keys of User FCJ-User-Login.\nPlease note that the current status of Access Key has changed to Inactive. aws iam list-access-keys --user-name FCJ-User-Login Execute the command delete-access-key to delete the Access Key of User FCJ-User-Login. Please replace \u0026lt;your_access_key_ID\u0026gt; to match your information aws iam delete-access-key --access-key-id \u0026lt;your_access_key_ID\u0026gt; --user-name FCJ-User-Login Execute the command list-access-keys to list all Access Keys of User FCJ-User-Login.\nWe see that currently User FCJ-User-Login no longer has any Access Key aws iam list-access-keys --user-name FCJ-User-Login "
},
{
	"uri": "/6-policiespermissions/6.4-boundaries/6.4.2-roles/",
	"title": "Boundaries for Roles",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function attach-role-policy Attach Managed Policies to the specified Role detach-role-policy Detach Managed Policies to the specified Role put-role-permissions-boundary Specify Managed Policies as the permission boundary of the specified Role delete-role-permissions-boundary Delete Managed Policies that have been specified as permission boundaries from the specified Role We can dig deeper into each command by clicking on the command name.\nSpecify permission boundaries for Roles For ease, in this section we will use AWS Managed Policies Execute the command attach-role-policy to Attach AWS Managed Policies AdministratorAccess to Role FCJ-Role aws iam attach-role-policy --role-name FCJ-Role --policy-arn arn:aws:iam::aws:policy/AdministratorAccess Execute the command put-role-permissions-boundary to specify AWS Managed Policies AmazonS3FullAccess as the permission boundary of the Role FCJ-Role aws iam put-role-permissions-boundary --role-name FCJ-Role --permissions-boundary arn:aws:iam::aws:policy/AmazonS3FullAccess Simulator Permissions boundaries Reload the IAM Policy Simulator page In the Roles, Groups, and Roles field, select FCJ-Role The Policies tab appears, we will see that in the IAM Policies field is the AWS Managed Policies AdministratorAccess, in the Permission Boundary Policy field is the AWS Managed Policies AmazonS3FullAccess we added to the Role FCJ-Role in the step above In the Policy Simulator field, select the S3 service, then select Select All Select Simulator, we see allowed results for all actions Select Clear Result In the Policy Simulator field, select the EC2 service, then select Select All Select Simulator, we see denied results for all actions Select Clear Result In the Policy Simulator field, select the Lamda service, then select Select All Select Simulator, we see denied results for all actions So, we have successfully set the maximum permission boundary for FCJ-Role to only AmazonS3FullAccess, not AdministratorAccess\nRemove permission boundaries from Roles Execute the command delete-role-permissions-boundary to delete the Managed Policies that have been specified as the permission boundaries of the Role FCJ-Role aws iam delete-role-permissions-boundary --role-name FCJ-Role Execute the command detach-role-policy to detach AWS Managed Policies AdministratorAccess from Role FCJ-Role aws iam detach-role-policy --role-name FCJ-Role --policy-arn arn:aws:iam::aws:policy/AdministratorAccess "
},
{
	"uri": "/2-preparation/2.2-createec2/",
	"title": "Create EC2 Instances",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access EC2 Console Select Key Pairs Select Create key pair At the Create key pair page In the Name field, enter FCJ-keypair In the Key pair type field, select RSA In the Private key file format field, select .pem Then select Create key pair and save the file FCJ-keypair.pem on your computer to use for the SSH service in the next steps Successfully created FCJ-keypair.pem Return to EC2 Console Select Instances Select Launch instances At Launch an Instance page In the Name field, enter FCJ-Lab In the Amazon Machine Image (AMI) field, select Amazon Linux 2 AMI In the Instance type field, select Instance type t2.micro In the Key pair (login) field, select the FCJ-keypair created in the previous step Check the information again and select Launch instance Do the same as steps 4 and 5 to create another EC2 Instance with name: FCJ-Test\nComplete creating 2 EC2 Instances FCJ-Lab and FCJ-Test "
},
{
	"uri": "/6-policiespermissions/6.2-inlinepolicies/",
	"title": "Inline Policies",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will perform operations related to Inline Policies by AWS CLI.\nContent: 6.2.1 Create Policies\n6.2.2 Simulator\n6.2.3 Delete Policies\n"
},
{
	"uri": "/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will perform:\nCreate 1 IAM Role Create 1 AWS keypair and 2 EC2 Instances Modify IAM Role for 1 EC2 Instance Configure AWS CLI on EC2 Instance Create Account Alias for our AWS Account Content 2.1 Create IAM Role\n2.2 Create EC2 Instances\n2.3 Modify IAM Role EC2\n2.4 Configure AWS CLI\n2.5 Create Account Alias\n"
},
{
	"uri": "/6-policiespermissions/6.2-inlinepolicies/6.2.2-simulator/",
	"title": "Simulator",
	"tags": [],
	"description": "",
	"content": "Simulator Inline Policies for User (FCJ-User-Login) Reload the IAM Policy Simulator page In the Users, Groups, and Roles field, select FCJ-User-Login The Policies tab appears, we will see in the IAM Policies field the Inline Policies FCJ-User-Inline-Policy policy we have embedded in User FCJ-User- Login at step 6.2.1 In the Policy Simulator field, select the EC2 service, then select Select All Select Simulator, we see allowed results for all actions Select Clear Result In the Policy Simulator field, select the S3 service, then select Select All Select Simulator, we see denied results for all actions Select Clear Result In the Policy Simulator field, select the Lamda service, then select Select All Select Simulator, we see denied results for all actions Return to the Console interface logged in with User FCJ-User-Login in step 3.2 Access EC2 Console We will see we get FullAccess for the EC2 service So, Inline Policies for User FCJ-User-Login works correctly\nSimulator Inline Policies for Group (FCJ-Group) Here, we will conduct simulations with FCJ-User, because FCJ-User belongs to FCJ-Group\nIn the Users, Groups, and Roles field, select FCJ-User The Policies tab appears, we will see in the IAM Policies field the Inline Policies FCJ-Inline-Policy policy we have embedded in the Group FCJ-Group in step 6.2.1 In the Policy Simulator field, select the S3 service, then select Select All Select Simulator, we see allowed results for all actions Select Clear Result In the Policy Simulator field, select the EC2 service, then select Select All Select Simulator, we see denied results for all actions Select Clear Result In the Policy Simulator field, select the Lamda service, then select Select All Select Simulator, we see denied results for all actions So, Inline Policies for Group FCJ-Group is working correctly\nSimulator Inline Policies for FCJ-Role In the Users, Groups, and Roles field, select FCJ-Role The Policies tab appears, we will see in the IAM Policies field the Inline Policies FCJ-Inline-Policy policy we have embedded into the Role FCJ-Role in step 6.2.1 In the Policy Simulator field, select the S3 service, then select Select All Select Simulator, we see allowed results for all actions Select Clear Result In the Policy Simulator field, select the EC2 service, then select Select All Select Simulator, we see denied results for all actions Select Clear Result In the Policy Simulator field, select the Lamda service, then select Select All Select Simulator, we see denied results for all actions So, Inline Policies for Role FCJ-Role works correctly\n"
},
{
	"uri": "/6-policiespermissions/6.2-inlinepolicies/6.2.3-deletepolicies/",
	"title": "Delete Policies",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function delete-user-policy Delete the specified Inline Policy from the specified User list-user-policies List all Inline Policies of the specified User delete-group-policy Delete the specified Inline Policy from the specified Group list-group-policies List all Inline Policies of the specified Group delete-role-policy Delete the specified Inline Policy from the specified Role list-role-policies List all Inline Policies of the specified Role We can dig deeper into each command by clicking on the command name.\nDelete Policies Execute the command delete-user-policy to delete Inline Policies FCJ-User-Inline-Policy from User FCJ-User-After aws iam delete-user-policy --user-name FCJ-User-Login --policy-name FCJ-User-Inline-Policy Execute the command delete-group-policy to delete Inline Policies FCJ-Inline-Policy from Group FCJ-Group aws iam delete-group-policy --group-name FCJ-Group --policy-name FCJ-Inline-Policy Execute the command delete-role-policy to delete Inline Policies FCJ-Inline-Policy from Role FCJ-Role aws iam delete-role-policy --role-name FCJ-Role --policy-name FCJ-Inline-Policy Execute the command list-user-policies to list all Inline Policies of User FCJ-User-Login.\nWe see that currently User FCJ-User-Login no longer has any Inline Policies aws iam list-user-policies --user-name FCJ-User-Login Execute the command list-group-policies to list all Inline Policies of Group FCJ-Group.\nWe see that currently Group FCJ-Group no longer has any Inline Policies aws iam list-group-policies --group-name FCJ-Group Execute the command list-role-policies to list all Inline Policies of Role FCJ-Role.\nWe see that currently the Role FCJ-Role no longer has any Inline Policies aws iam list-role-policies --role-name FCJ-Role "
},
{
	"uri": "/5-workroles/5.3-deleterole/",
	"title": "Delete Roles",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function list-roles List all existing Roles in Account delete-role Delete the specified Role We can dig deeper into each command by clicking on the command name.\nDelete Roles Execute the command list-roles to list all existing Roles in Account aws iam list-roles In case our Account has many Roles, the output will be a lot, quite difficult to list. So we can add the --query option to process the output more compactly and as desired. The command below will filter out Roles with Rolename starting with the string \u0026ldquo;FCJ-Role\u0026rdquo; and print only 2 contents including Rolename and Arn aws iam list-roles --query \u0026#34;Roles[?starts_with(RoleName,\u0026#39;FCJ-Role\u0026#39;)].{RoleName:RoleName, Arn:Arn}\u0026#34; --output json Execute the command delete-role to delete the Role FCJ-Role-Updated aws iam delete-role --role-name FCJ-Role-Updated Execute the command list-roles to list all existing Roles in Account\nWe see that currently there is only Role FCJ-Role aws iam list-roles "
},
{
	"uri": "/4-workusergroups/4.3-deletegroup/",
	"title": "Delete User Groups",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function list-groups List all existing Groups in Account remove-user-from-group Delete the specified User from the specified Group delete-group Delete the specified Group We can dig deeper into each command by clicking on the command name.\nDelete User Groups Execute the list-groups command to list existing Groups in Account.\nWe see that there are currently 2 Groups FCJ-Group and FCJ-Group-After aws iam list-groups Execute the command delete-group to delete Group FCJ-Group-After aws iam delete-group --group-name FCJ-Group-After Execute the list-groups command to list existing Groups in Account.\nWe see that currently there is only Group FCJ-Group aws iam list-groups Must delete User from Group (remove-user-from-group, review step 4.2) before deleting Group (delete-group)\n"
},
{
	"uri": "/3-workusers/3.3-deleteuser/",
	"title": "Delete Users",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function list-users List all existing Users in Account delete-user Delete the specified User We can dig deeper into each command by clicking on the command name.\nDelete Users Execute the command list-users to list all existing Users in Account.\nWe see that there are currently 3 Users FCJ-User, FCJ-User-Login, FCJ-User-After aws iam list-users Execute the command delete-user to delete User FCJ-User-After aws iam delete-user --user-name FCJ-User-After Execute the command list-users to list all existing Users in Account.\nWe see that there are currently only 2 Users FCJ-User, FCJ-User-Login. These two Users will be used in the next steps. aws iam list-users "
},
{
	"uri": "/6-policiespermissions/6.3-managedpolicies/",
	"title": "Managed Policies",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will perform operations related to Managed Policies by AWS CLI.\nContent: 6.3.1 Create Policies\n6.3.2 Attach Policies\n6.3.3 Simulator\n6.3.4 Delete Policies\n"
},
{
	"uri": "/2-preparation/2.3-modifyroles/",
	"title": "Modify IAM Role EC2",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access EC2 Console Select FCJ-Lab Select Actions, select Security then select Modify IAM Role At Modify IAM Role page In the IAM Role field, enter the FCJ-Admin-Role created in step 2.1 Then select Update IAM Role Successfully Modify IAM Role for EC2 Instance FCJ-Lab "
},
{
	"uri": "/6-policiespermissions/6.3-managedpolicies/6.3.3-simulator/",
	"title": "Simulator",
	"tags": [],
	"description": "",
	"content": "Simulator Managed Policies for User (FCJ-User-Login) Access EC2 Console We see that the number of EC2 Instances is now listed, this is the impact of the ec2:DescribeInstances permission on all EC2 Resources of Managed Policies FCJ-User-Managed-Policy Select Instances, we will be taken to a more detailed interface Select FCJ-Test\nSelect Instance State, then select Stop Instance At this point we get an error, we don\u0026rsquo;t have enough rights to perform actions, because Managed Polices FCJ-User-Managed-Policy can only perform the rights ec2:StartInstances and ec2:StopInstances when satisfying Condition is ResourceTag with Key=Group, Value=FCJ. In the Tag section, we currently do not have a Tag that satisfies this condition. Next we will add Tag to Instance FCJ-Test with Key=Group, Value=FCJ Execute the following command to print InstanceId of Instance FCJ-Test aws ec2 describe-instances --filters \u0026#34;Name=tag:Name,Values=FCJ-Test\u0026#34; --query \u0026#39;Reservations[].Instances[].{InstanceId:InstanceId}\u0026#39; --output text Save the output value InstanceId of the above command and then execute the following command to add Tag with Key=Group, Value=FCJ to Instance FCJ-Test aws ec2 create-tags --resources \u0026lt;your_InstanceID\u0026gt; --tags \u0026#39;Key=\u0026#34;Group\u0026#34;,Value=FCJ\u0026#39; Try performing the Stop Instance operation again for Instance FCJ-Test, we see that the Stop Instance action has been performed successfully. Select Tag, we see there is an additional tag with Key=Group,Value=FCJ that we added in the above command. Wait for Instance FCJ-Test to enter Stopped state Select Instance State, then select Start Instance We see that the Start Instance action has been performed successfully So, the Managed Policies that we have Attach to User FCJ-User-Login is working properly\nSimulator Managed Policies for Group (FCJ-Group) Here, we will conduct simulations with FCJ-User, because FCJ-User belongs to FCJ-Group\nReload the IAM Policy Simulator page In the Users, Groups, and Roles field, select FCJ-User The Policies tab appears, we will see in the IAM Policies field the Managed Policies FCJ-Managed-Policy policy we have embedded in the Group FCJ-Group in step 6.3.2 In the Policy Simulator field, select the S3 service, then select 3 Actions CreateBucket, DeleteBucket, ListBucket and some optional Actions Select Simulator, we see allowed results for 3 Actions CreateBucket, DeleteBucket, ListBucket, while the optional Actions produce denied results Select Clear Result In the Policy Simulator field, select the EC2 service, then select 3 Actions DescribeInstances, DescribeImages, DescribeInstanceTypes and some optional Actions Select Simulator, we see allowed results for 3 Actions DescribeInstances, DescribeImages, DescribeInstanceTypes, while the optional Actions produce denied results So, Managed Policies that we Attach to Group FCJ-Group has worked properly\nSimulator Managed Policies for FCJ-Role In the Users, Groups, and Roles field, select FCJ-Role The Policies tab appears, we will see in the IAM Policies field the Managed Policies FCJ-Managed-Policy policy we have embedded into the Role FCJ-Role in step 6.3.2 In the Policy Simulator field, select the S3 service, then select 3 Actions CreateBucket, DeleteBucket, ListBucket and some optional Actions Select Simulator, we see allowed results for 3 Actions CreateBucket, DeleteBucket, ListBucket, while the optional Actions produce denied results Select Clear Result In the Policy Simulator field, select the EC2 service, then select 3 Actions DescribeInstances, DescribeImages, DescribeInstanceTypes and some optional Actions Select Simulator, we see allowed results for 3 Actions DescribeInstances, DescribeImages, DescribeInstanceTypes, while the optional Actions produce denied results In addition, we can choose many services at once. In the picture is an example for both S3 and EC2 services So, the Managed Policies that we have attached to the Role FCJ-Role is working properly.\n"
},
{
	"uri": "/3-workusers/",
	"title": "Work with Users",
	"tags": [],
	"description": "",
	"content": "\nIn this step, we will perform operations related to Users by AWS CLI.\nContent 3.1 Create Users\n3.2 Authentication Management\n3.3 Delete Users\n"
},
{
	"uri": "/2-preparation/2.4-configurecli/",
	"title": "Configure AWS CLI",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access EC2 Console Select FCJ-Lab In the Detail tab, save the Public IPv4 Address information to prepare information for the SSH step below We proceed to perform SSH into EC2 Instance FCJ-Lab\nHere we use MobaXterm. You can see more details Connect Amazon Linux 2 using MobaXterm Select Session Select SSH In the Remote host field, enter the Public IPv4 Address that was saved in the previous step Select Specify username, enter ec2-user Select Advange SSH Settings Select use private key, then retrieve the path to the file FCJ-keypair.pem saved in step 2.2 Select OK Connected successfully as shown below\nNext we proceed to execute the commands to configure AWS CLI First we execute the following command to configure AWS CLI on EC2 Instance aws configure In which AWS Access Key ID [None]: Leave blank AWS Secret Access Key [None]: Leave blank Default region name [None]: enter ap-southeast-1 Default output format [None]: enter json Execute the following command to check if the AWS CLI is working on EC2 Instance, this command will list all current EC2 Instances, displaying parameters:\nInstanceId, PublicIpAddress, State, Name as table aws ec2 describe-instances --query \u0026#39;Reservations[].Instances[].{InstanceId:InstanceId, IP:PublicIpAddress, State:State.Name, Name:Tags[?Key==`Name`]|[0].Value }\u0026#39; --output table So AWS CLI has been successfully configured on our EC2 Instance.\nIn fact, we do not need to enter Access Key ID and Secret Access Key because we have Modified Role for EC2 with Policies Administrator in step 2.3.\nSo from EC2 we can perform any action on AWS resources in our Account. From here, the CLI commands of the Workshop will be used through the Terminal of EC2 Instance FCJ-Lab\n"
},
{
	"uri": "/6-policiespermissions/6.3-managedpolicies/6.3.4-deletepolicies/",
	"title": "Delete Policies",
	"tags": [],
	"description": "",
	"content": "Frequently used commands Command Function list-entities-for-policy List all Entities of the specified Managed Policies detach-user-policy Detach the specified Managed Policies from the specified User detach-group-policy Detach the specified Managed Policies from the specified Group detach-role-policy Detach the specified Managed Policies from the specified Role delete-policy Delete the specified Managed Policy We can dig deeper into each command by clicking on the command name.\nDelete Policies Add your Account ID information before executing attach commands\nExecute the command list-entities-for-policy to list all Entities of Managed Policies FCJ-User-Managed-Policy.\nWe see that User FCJ-User-Login is being Attach aws iam list-entities-for-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-User-Managed-Policy Execute the command list-entities-for-policy to list all Entities of Managed Policies FCJ-Managed-Policy.\nWe see that Group FCJ-Group and Role FCJ-Role are being Attach aws iam list-entities-for-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-Managed-Policy Execute the command detach-user-policy to detach Managed Policies FCJ-User-Managed-Policy from User FCJ-User-Login aws iam detach-user-policy --user-name FCJ-User-Login --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-User-Managed-Policy Execute the command detach-group-policy to detach Managed Policies FCJ-Managed-Policy from Group FCJ-Group aws iam detach-group-policy --group-name FCJ-Group --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-Managed-Policy Execute the command detach-role-policy to detach Managed Policies FCJ-Managed-Policy from the Role FCJ-Role aws iam detach-role-policy --role-name FCJ-Role --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-Managed-Policy Execute command list-entities-for-policy to list all Entities of Managed Policies FCJ-User-Managed-Policy\nWe see that there are no more Entities that can be Attach aws iam list-entities-for-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-User-Managed-Policy Execute command list-entities-for-policy to list all Entities of Managed Policies FCJ-Managed-Policy\nWe see that there are no more Entities that can be Attach aws iam list-entities-for-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-Managed-Policy Execute the command delete-policy to delete Managed Policies FCJ-User-Managed-Policy and FCJ-Managed-Policy aws iam delete-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-User-Managed-Policy\raws iam delete-policy --policy-arn arn:aws:iam::\u0026lt;your_Account_ID\u0026gt;:policy/FCJ-Managed-Policy "
},
{
	"uri": "/6-policiespermissions/6.4-boundaries/",
	"title": "Permissions boundaries",
	"tags": [],
	"description": "",
	"content": "Permissions Boundaries is a feature that allows us to use Managed Policies to set boundaries for IAM Identities (Users or Roles) meaning that the policy will limit the maximum permissions for a Users or Roles.\nIn this chapter, we will perform operations related to Permissions Boundaries with Users and Roles by AWS CLI.\nContent: 6.4.1 Users\n6.4.2 Roles\n"
},
{
	"uri": "/4-workusergroups/",
	"title": "Work with User Groups",
	"tags": [],
	"description": "",
	"content": "\nIn this chapter, we will perform operations related to User Groups by AWS CLI.\nContent 4.1 Create User Groups\n4.2 Add User to Group\n4.3 Delete User Groups\n"
},
{
	"uri": "/2-preparation/2.5-creatalias/",
	"title": "Create Account Alias",
	"tags": [],
	"description": "",
	"content": "Execution sequence Access IAM Console Select Dashboard In the AWS Account field we see the information Account ID: A 12-digit character sequence representing our Account Account Alias: No information yet Sign-in URL for IAM users in this account: login path for IAM users in this account. Format https://\u0026lt;Account_ID\u0026gt;.signin.aws.amazon.com/console Remembering this 12-digit Account ID is very difficult in case our Account has many Users, so AWS provides us with the Account Alias feature to create an alias represents the company name, team name, or individual for easier login purposes.\nWe will create Account Alias through AWS CLI with the following command, replace \u0026lt;Account_Alias\u0026gt; with the name you want\naws iam create-account-alias --account-alias \u0026lt;Account_Alias\u0026gt; Reload IAM Console Select Dashboard In the AWS Account field, we see the information, Account Alias, Sign-in URL for IAM users in this account have been updated corresponding to \u0026lt;Account_Alias \u0026gt; that we just did in the command above. From now on we can easily log in to Console via the link syntax https://\u0026lt;Account_Alias\u0026gt;.signin.aws.amazon.com/console "
},
{
	"uri": "/5-workroles/",
	"title": "Work with Roles",
	"tags": [],
	"description": "",
	"content": "\nIn this chapter, we will perform operations related to Roles by AWS CLI.\nContent 5.1 Create Roles\n5.2 Attach Policy\n5.3 Delete Roles\n"
},
{
	"uri": "/6-policiespermissions/",
	"title": "Policies and Permissions",
	"tags": [],
	"description": "",
	"content": "\nThe concept Policies are permissions created or assigned to control access to AWS resources. Each policy has certain features and permissions associated with Users, Groups, and Roles in IAM.\nIn AWS, Policies are divided into two types: Identity-based policies and Resource-based policies\nIdentity-based policies: assigned to IAM identities (IAM Users, IAM Groups, IAM Roles) specify actions and corresponding resources that IAM identities are allowed (Allow ) or not allowed (Deny) to perform. Identity-based policies can be classified into 2 types: Managed policies: Independent identity-based policies that you can attach to multiple users, groups, and roles in our AWS account. AWS managed policies: Managed policies are created and managed by AWS. Customer managed policies: Policies that we create and manage ourselves in our AWS account. Inline policies: Temporary policies that we create and manage and are embedded directly into a User, Group or Role. Resource-based policies: This type of policy is assigned to AWS Resource, such as EC2 resources, S3 buckets, Lambda, and many other services. This policy defines who or what has permission to access or perform actions on the resource itself. Structure of a Policy {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;:[\r{\r\u0026#34;Effect\u0026#34;:\u0026#34;effect\u0026#34;,\r\u0026#34;Action\u0026#34;:\u0026#34;action\u0026#34;,\r\u0026#34;Resource\u0026#34;:\u0026#34;arn\u0026#34;,\r\u0026#34;Condition\u0026#34;:{\r\u0026#34;condition\u0026#34;:{\r\u0026#34;key\u0026#34;:\u0026#34;value\u0026#34;\r}\r}\r}\r]\r} In which:\nVersion: is the version of the policy language Effect: Is a required component and specifies whether the statement result is accepted or rejected (Allow/Deny) Action: Describes the specific action that will be allowed or denied. Resource: Specifies the AWS resources affected by the Action. Condition: Specify the required conditions for the policy to take effect In this chapter, we will learn about Policy Simulator and perform operations related to Policies and Permissions using AWS CLI.\nContent 6.1 Policy Simulator\n6.2 Inline Policies\n6.3 Managed Policies\n6.4 Permissions boundaries\n"
},
{
	"uri": "/7-cleanup/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "We will proceed with the following steps to delete the resources we created in this Workshop.\nDelete EC2 Instances Access EC2 Console\nSelect Instances Select FCJ-Lab and FCJ-Test Select Instance state Select Terminate instance, then select Terminate to confirm Delete Key pairs At EC2 Console\nSelect Key Pairs Select FCJ-keypair Select Actions, then select Delete Enter Delete to confirm, then select Delete Delete User Groups Access IAM Console\nSelect User Groups Select FCJ-Group Select Delete Enter FCJ-Group to confirm, then select Delete Delete Users At IAM Console\nSelect Users Select FCJ-User and FCJ-User-Login Select Delete Enter delete to confirm, then select Delete users Delete Roles At IAM Console\nSelect Roles Select FCJ-Admin-Role and FCJ-Role Select Delete Enter delete to confirm, then select Delete "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]